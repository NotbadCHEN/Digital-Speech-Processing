import jieba
import pyttsx3
import time
import tkinter as tk


class ChatBot(tk.Tk):

    def __init__(self, path):
        tk.Tk.__init__(self)

        self.engine = pyttsx3.init()  # 语音模块
        self.engine.setProperty('rate', 150)  # 语速
        self.engine.setProperty('volume', 1)  # 音量
        self.path = path

        # 设置窗口
        self.title('聊天机器人')
        self.geometry('500x500+400+100')

        # 添加控件
        self.label = tk.Label(self, text='您请说', font=('Arial', 12), anchor='w', justify='left')
        self.label.pack(fill='both', side='top', padx=5, pady=5)

        self.entry = tk.Entry(self, font=('Arial', 12))
        self.entry.pack(fill='both', side='bottom', padx=5, pady=5)
        self.entry.focus()  # 将光标设置到输入框里

        # 监听按键事件
        self.entry.bind('<Return>', self.reply)

    def ai_StrSplit(self,String):
        '''
        Decompose the string into a list              #将字符串分解为一个列表
        :param String: The string to be decompased    #要分解的字符串
        :return: String_lt                            #分解后的字符串列表
        '''
        String_lt = jieba.lcut(String, cut_all=True)  # 要引入jieba库
        String1 = jieba.lcut(String, cut_all=True)
        String2 = jieba.lcut(String, cut_all=True)
        String3 = jieba.lcut(String, cut_all=True)
        String3.append('')
        for Str1 in String1:
            String2.remove(Str1)
            for Str2 in String2:
                try:
                    String3.remove(Str1)
                except:
                    pass
                try:
                    String3.remove(Str2)
                except:
                    pass
                for Str3 in String3:
                    String_lt.append(Str1 + Str2 + Str3)
        String_lt = sorted(String_lt, reverse=True)
        return String_lt

    def ai_MatchSiple(self, String):
        '''
        Matches the dictionary to a single string
        :param String: The string to match       #要匹配的字符串
        :return: lt_ms                           #匹配结果与判断(1有/0无)的列表
        '''

        errow_matchsplit = 0
        back = None
        with open(self.path, 'r', encoding='utf-8') as f:
            while errow_matchsplit == 0:
                f1 = f.readline().strip()
                f2 = f.readline().strip()
                f3 = f.readline().strip()
                if String == f1:
                    back = f2
                    errow_matchsplit = 1
                    break
                if f1 == '' or f2 == '':
                    break
        lt_ms = [back, errow_matchsplit]
        return lt_ms

    def ai_MatchHeight(self, String_lt):
        '''
        Matches the dictionary to a single string   #用字符串列表匹配字典
        :param String_lt: list of strings to match  #要匹配的字符串列表
        :return: lt_mh                              #匹配结果与判断(1有/2无)的列表
        '''
        errow_matchheight = 0
        back = None
        with open(self.path, 'r', encoding='utf-8') as f:  # 注意编码
            while errow_matchheight == 0:
                f1 = f.readline().strip()
                f2 = f.readline().strip()
                f3 = f.readline().strip()
                for String in String_lt:
                    if String == f1:
                        back = f2
                        errow_matchheight = 1
                        break
                if f1 == '' or f2 == '':
                    break
        lt_mh = [back, errow_matchheight]
        return lt_mh

    def ai_study(self, study_start, study_end):
        '''
        Open the dictionary and write the match statement and the match result  #打开字典并编写匹配的语句和匹配的结果
        :param study_start: Dictionary matching statements                      #字典匹配语句
        :param study_end: The dictionary returns the result                     #字典返回结果
        :return: None                                                           #无返回
        '''

        with open(self.path, 'a', encoding='utf-8') as f:
            f.write(study_start + '\n')
            f.write(study_end + '\n')
            f.write('\n')

    def reply(self, event):
        user_in = self.entry.get()
        show_format = ' 我：{}\n{}\n'
        self.label['text'] += show_format.format(user_in, '')

        if user_in == '退出':
            self.label['text'] += "再见！"
            self.engine.say('再见')
            self.engine.runAndWait()
            time.sleep(1)
            self.destroy()
            return

        a1 = self.ai_MatchSiple(String=user_in)
        show = a1[0]
        errow_matchsimple = a1[1]
        if errow_matchsimple == 0:
            String_lt = self.ai_StrSplit(String=user_in)
            a2 = self.ai_MatchHeight(String_lt=String_lt)
            show = a2[0]
            errow_matchight = a2[1]
            if errow_matchight == 0:
                self.label['text'] += '小四：请您输入学习语句（n退出学习）\n'
                study_start = self.entry.get()
                if study_start != 'n' and study_start != 'no':
                    self.label['text'] += '小四: 请您输入回答语句（n退出学习）\n'
                    study_end = self.entry.get()
                    if study_end != 'n' and study_end != 'no':
                        self.label['text'] += '小四：加载中...\n'
                        self.ai_study(study_start=study_start, study_end=study_end)
                        self.label['text'] += '小四:加载完成\n'
            else:
                self.label['text'] += '小四：{}\n'.format(show)
                self.engine.say(show)
                self.engine.runAndWait()

        else:
            self.label['text'] += '小四：{}\n'.format(show)
            self.engine.say(show)
            self.engine.runAndWait()

        self.entry.delete(0, 'end')
        self.label.update()  # 更新标签的显示


if __name__ == '__main__':
    path = r'data/cy的AI聊天库.txt'
    ChatBot(path).mainloop()
